<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>@nimeajku</title>
    <link>https://clairekiu.github.io/</link>
    <description>Recent content on @nimeajku</description>
    <generator>Hugo -- 0.128.2</generator>
    <language>kr-ko</language>
    <lastBuildDate>Sun, 07 Jul 2024 02:49:18 +0900</lastBuildDate>
    <atom:link href="https://clairekiu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Union Find (C&#43;&#43;)</title>
      <link>https://clairekiu.github.io/post/union-find/</link>
      <pubDate>Sun, 07 Jul 2024 02:49:18 +0900</pubDate>
      <guid>https://clairekiu.github.io/post/union-find/</guid>
      <description>Union Find Union Find: 그래프에서 두 노드가 같은 집합에 속하는지 판별하는 알고리즘 노드를 합치는 union 연산 노드가 같은 집합인지 판별하는 find 연산 구조 unionfind[i]: i번 노드의 부모 노드 정보를 담는다. unify(x, y): x번 노드와 y번 노드를 합친다. 이때 unify 이후 둘은 같은 부모 노드를 가리키게 된다. same(x, y): x번 노드와 y번 노드가 같은 집합에 있는 지 반환한다. find(x): x번 노드의 부모 노드 정보를 반환한다. 이때 unionfind[x]를 단순히 반환하는 것이 아닌, unionfind[x]를 업데이트하는 과정을 거침 재귀함수를 통해 구현하여 찾음과 동시에 부모 노드가 업데이트되도록 함 전체 코드 #include &amp;lt;iostream&amp;gt; #define MAX 100 using namespace std; using ll = long long; ll unionfind[MAX]; ll find(ll x){ if(unionfind[x]==x){ return x; } return unionfind[x]=find(unionfind[x]); } void unify(ll x, ll y){ ll n1=find(x), n2=find(y); if(n1&amp;lt;n2){ unionfind[n2]=n1; } else{ unionfind[n1]=n2; } } bool same(ll x, ll y){ return (find(x)==find(y)); } int main(){ } </description>
    </item>
    <item>
      <title>Group Velocity Visualization</title>
      <link>https://clairekiu.github.io/post/group-velocity/</link>
      <pubDate>Fri, 05 Jul 2024 00:58:44 +0900</pubDate>
      <guid>https://clairekiu.github.io/post/group-velocity/</guid>
      <description> 군속도 시각화 파수와 각진동수가 미세하게 다른 5개의 파동 중첩 시각화 검은색의 5개 파동이 중첩되지 않은 원본이다. 5개의 원본 파동을 합친 파동을 붉은색으로 표시했다. 합성된 파동의 외피가 느린 속도로 진행함을 확인할 수 있다. 구현 방법 Processing으로 구현 후 p5.js로 변환했다. p5js.org에 업로드 후 임베드했다. </description>
    </item>
  </channel>
</rss>
